{"version":3,"file":"demo-app.js","sourceRoot":"","sources":["../Users/scoope7/toastr-ng2/tmp/broccoli_type_script_compiler-input_base_path-ovZsQlYY.tmp/0/src/demo-app/demo-app.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuE,eAAe,CAAC,CAAA;AACvF,uBAAyD,6BAA6B,CAAC,CAAA;AACvF,IAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAE5B,IAAM,MAAM,GAAG;IACb;QACE,KAAK,EAAE,kBAAkB;QACzB,OAAO,EAAE,gCAAgC;QACzC,OAAO,EAAE;YACP,SAAS,EAAE,IAAI;SAChB;KACF;IACD;QACE,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,uBAAuB;KACjC;IACD;QACE,KAAK,EAAE,wBAAwB;QAC/B,OAAO,EAAE,oCAAoC;KAC9C;IACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,iEAAiE;KAC3E;IACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,8BAA8B;KACxC;IACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,cAAc;KACxB;IACD;QACE,KAAK,EAAE,uBAAuB;QAC9B,OAAO,EAAE,yCAAyC;QAClD,OAAO,EAAE;YACP,SAAS,EAAE,IAAI;SAChB;KACF;CAQF,CAAC;AACF,IAAM,KAAK,GAAa,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAYhE;IAQE,iBACU,aAA4B,EAC5B,gBAAkC;QADlC,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAP5C,UAAK,GAAW,EAAE,CAAC;QACnB,SAAI,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,YAAO,GAAW,EAAE,CAAC;QACrB,iBAAY,GAAa,EAAE,CAAC;QAM1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;QAC/C,8DAA8D;QAC9D,aAAa,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAEvD,QAAQ;QACR,qCAAqC;IACvC,CAAC;IACD,2BAAS,GAAT;QACE,iEAAiE;QACjE,IAAI,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAC7E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IACD,iCAAe,GAAf;IAEA,CAAC;IACD,6BAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IACD,gCAAc,GAAd;QACE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;IACpD,CAAC;IA5CH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,EAAE;YACb,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;YACpC,UAAU,EAAE,EAAE;YACd,aAAa,EAAE,wBAAiB,CAAC,IAAI;YACrC,KAAK,EAAE,EAAE;SACV,CAAC;;eAAA;IAqCF,cAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,eAAO,UAoCnB,CAAA","sourcesContent":["import { Component, ViewEncapsulation, OnInit, ViewContainerRef } from '@angular/core';\nimport { ToastrService, ToastrConfig, ActiveToast } from '../components/toastr/toastr';\nimport * as _ from 'lodash';\n\nconst quotes = [\n  {\n    title: 'Come to Freenode',\n    message: 'We rock at <em>#angularjs</em>',\n    options: {\n      allowHtml: true\n    }\n  },\n  {\n    title: 'Looking for bootstrap?',\n    message: 'Try ui-bootstrap out!'\n  },\n  {\n    title: 'Wants a better router?',\n    message: 'We have you covered with ui-router'\n  },\n  {\n    title: null,\n    message: 'My name is Inigo Montoya. You killed my father. Prepare to die!',\n  },\n  {\n    title: null,\n    message: 'Titles are not always needed'\n  },\n  {\n    title: null,\n    message: 'Toastr rock!'\n  },\n  {\n    title: 'What about nice html?',\n    message: '<strong>Sure you <em>can!</em></strong>',\n    options: {\n      allowHtml: true\n    }\n  },\n  // {\n  //   title: 'Ionic is <em>cool</em>',\n  //   message: 'Best mobile framework ever',\n  //   options: {\n  //     allowHtml: true\n  //   }\n  // }\n];\nconst types: string[] = ['success', 'error', 'info', 'warning'];\n\n\n@Component({\n  selector: 'demo-app',\n  providers: [],\n  templateUrl: 'demo-app/demo-app.html',\n  styleUrls: ['demo-app/demo-app.css'],\n  directives: [],\n  encapsulation: ViewEncapsulation.None,\n  pipes: [],\n})\nexport class DemoApp {\n  options: ToastrConfig;\n\n  title: string = '';\n  type: string = types[0];\n  message: string = '';\n  lastInserted: number[] = [];\n\n  constructor(\n    private toastrService: ToastrService,\n    private viewContainerRef: ViewContainerRef\n  ) {\n    this.options = this.toastrService.toastrConfig;\n    // necessary until we can accesses viewContainerRef in service\n    toastrService.viewContainerRef = this.viewContainerRef;\n\n    // setup\n    // this.options = new ToastrConfig();\n  }\n  openToast() {\n    // Clone current config so it doesn't change when ngModel updates\n    let newConfig = _.cloneDeep(this.options);\n    let ins = this.toastrService[this.type](this.message, this.title, newConfig);\n    if (ins) {\n      this.lastInserted.push(ins.toastId);\n    }\n  }\n  openRandomToast() {\n\n  }\n  clearToasts() {\n    this.toastrService.clear();\n  }\n  clearLastToast() {\n    this.toastrService.clear(this.lastInserted.pop());\n  }\n}\n"]}