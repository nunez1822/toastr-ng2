{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../Users/scoope7/toastr-ng2/tmp/broccoli_type_script_compiler-input_base_path-ovZsQlYY.tmp/0/src/components/toastr/overlay/overlay.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAC9D,gCAA8B,2BAA2B,CAAC,CAAA;AAC1D,4BAA2B,eAAe,CAAC,CAAA;AAE3C,kCAAiC,qBAAqB,CAAC,CAAA;AAEvD,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAGrB;;;;;;;GAOG;AAEH;IAGE,iBAAoB,iBAAmC,EACnC,kBAAqC;QADrC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,uBAAkB,GAAlB,kBAAkB,CAAmB;IAAG,CAAC;IAC7D;;;;OAIG;IACH,wBAAM,GAAN,UAAO,aAAqB;QAA5B,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACvF,CAAC;IACD,yBAAO,GAAP;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,gCAAc,GAAd,UAAe,aAAqB;QAClC,6DAA6D;QAC7D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QAAC,CAAC;QACnE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACK,oCAAkB,GAA1B,UAA2B,aAAqB;QAC9C,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,iBAAiB,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAClC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,qFAAqF;IACvF,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,+BAAa,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,wBAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAvDF;QAAC,iBAAU,EAAE;;eAAA;IAwDd,cAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,eAAO,UAuDnB,CAAA","sourcesContent":["import { ComponentResolver, Injectable } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { OverlayContainer } from './overlay-container';\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\nexport class Overlay {\n  private _paneElement: HTMLElement;\n\n  constructor(private _overlayContainer: OverlayContainer,\n              private _componentResolver: ComponentResolver) {}\n  /**\n   * Creates an overlay.\n   * @param state State to apply to the overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass: string): Promise<OverlayRef> {\n    return this.getPaneElement(positionClass).then(pane => this._createOverlayRef(pane));\n  }\n  dispose() {\n    this._paneElement = null;\n  }\n\n  getPaneElement(positionClass: string): Promise<HTMLElement> {\n    // TODO: possible multiple panes for multiple positionClasses\n    if (!this._paneElement) { this._createPaneElement(positionClass); }\n    return Promise.resolve(this._paneElement);\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Promise resolving to the created element.\n   */\n  private _createPaneElement(positionClass: string): Promise<HTMLElement> {\n    let pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    this._overlayContainer.getContainerElement().appendChild(pane);\n    this._paneElement = pane;\n    return Promise.resolve(pane);\n    // return Promise.resolve(this._overlayContainer.getContainerElement(positionClass));\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentResolver);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   * @param state\n   * @returns {OverlayRef}\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane);\n  }\n}\n"]}